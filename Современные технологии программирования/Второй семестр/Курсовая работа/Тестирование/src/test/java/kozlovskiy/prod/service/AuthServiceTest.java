package kozlovskiy.prod.service;

import kozlovskiy.prod.entities.User;
import kozlovskiy.prod.repo.AuthRepo;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;

import static org.mockito.Mockito.doReturn;

@RunWith(SpringRunner.class)
@SpringBootTest
public class AuthServiceTest {

    @Autowired
    private AuthService authService;

    @MockBean
    private AuthRepo authRepo;

    @Test
    public void registerUser() {
        User given = new User("yoda",
                "data",
                "X0dm231",
                "yoda@gmail.com");

        User expected = new User("yoda",
                "0fb784272f81aea7444c0dcbd23e1d2c",
                "X0dm231",
                "yoda@gmail.com");

        doReturn(null)
                .when(authRepo)
                .findByLogin("yoda",
                        "yoda@gmail.com");

        doReturn(expected)
                .when(authRepo)
                .save(given);

        User actual = authService.registerUser(given);
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void authorizeUser() {
        User given = new User("yoda",
                "data",
                "X0dm231",
                "yoda@gmail.com");

        User expected = new User("yoda",
                "0fb784272f81aea7444c0dcbd23e1d2c",
                "X0dm231",
                "yoda@gmail.com");

        doReturn(expected)
                .when(authRepo)
                .findByLogin("yoda",
                        "yoda@gmail.com");

        doReturn(expected)
                .when(authRepo)
                .save(given);

        User actual = authService.authorizeUser(given);
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void getUserData() {
        User expected = new User("yoda",
                "data",
                "X0dm231",
                "yoda@gmail.com");

        doReturn(Optional.of(expected))
                .when(authRepo)
                .findById(1L);

        User actual = authService.getUserData(1L);
        Assert.assertEquals(expected, actual);
    }

    @Test
    public void getHashedPass() throws Exception {
        String hashed = authService.getHashedPass("data", "X0dm231");
        String expected = "0fb784272f81aea7444c0dcbd23e1d2c"; // Generated by www.md5.cz

        Assert.assertEquals(hashed, expected);
    }
}